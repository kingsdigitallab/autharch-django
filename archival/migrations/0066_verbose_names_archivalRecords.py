# Generated by Django 2.2.7 on 2019-11-28 15:35

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('archival', '0065_auto_20191127_1423'),
    ]

    operations = [
        migrations.AlterField(
            model_name='file',
            name='creation_places',
            field=models.ManyToManyField(blank=True, help_text='The place of writing should be given whether it is a town, house, palace, ship, public house, etc. Enter what is given on the document, do not add details of the town etc. if they are not expressed in the document.', related_name='files_created', to='geonames_place.Place', verbose_name='Place of writing'),
        ),
        migrations.AlterField(
            model_name='file',
            name='creators',
            field=models.ManyToManyField(blank=True, help_text='This element is entered when the writer of the document can be identified. The name and title of the writer at the time of writing should be given. This data element will generally be used at File and Item level, but sometimes at Series level if the whole group of papers has been written by the same individual. If the writer cannot be identified, this data element should be left blank. Writers are those who own the intellectual content of a document, not the copyist. If the document has more than one writer, a new Writer field should be created for each name. Include life dates (in form 1765-1837) when necessary to differentiate between members of the royal family with the same name and title. Job title or occupation can be included if considered necessary, but is not mandatory. It is particularly useful for members of the Royal Household and tradespeople. Names and job titles should be separated by a semi-colon.', related_name='files_created', to='authority.Entity', verbose_name='Writer'),
        ),
        migrations.AlterField(
            model_name='file',
            name='persons_as_relations',
            field=models.ManyToManyField(blank=True, related_name='files_as_relations', to='authority.Entity', verbose_name='Addressee'),
        ),
        migrations.AlterField(
            model_name='file',
            name='places_as_relations',
            field=models.ManyToManyField(blank=True, related_name='files_as_relations', to='geonames_place.Place', verbose_name='Receiving address'),
        ),
        migrations.AlterField(
            model_name='item',
            name='creation_places',
            field=models.ManyToManyField(blank=True, related_name='items_created', to='geonames_place.Place', verbose_name='Place of writing'),
        ),
        migrations.AlterField(
            model_name='item',
            name='creators',
            field=models.ManyToManyField(blank=True, related_name='items_created', to='authority.Entity', verbose_name='Writer'),
        ),
        migrations.AlterField(
            model_name='item',
            name='persons_as_relations',
            field=models.ManyToManyField(blank=True, related_name='items_as_relations', to='authority.Entity', verbose_name='Addressee'),
        ),
        migrations.AlterField(
            model_name='item',
            name='places_as_relations',
            field=models.ManyToManyField(blank=True, related_name='items_as_relations', to='geonames_place.Place', verbose_name='Receiving address'),
        ),
    ]
